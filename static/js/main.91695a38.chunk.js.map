{"version":3,"sources":["components/SearchBar/SearchBar.js","components/BookCard/BookCard.js","components/BookResults/BookResults.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","event","handleQueryChange","target","value","handleQuerySubmit","preventDefault","react_default","a","createElement","id","onSubmit","type","size","placeholder","searchQuery","onChange","Component","BookCard","className","href","link","rel","src","img","alt","title","authorTitle","authors","publisher","BookResults","bookCardArray","resultsFound","Array","isArray","books","i","length","item","volumeInfo","map","author","key","imageLinks","thumbnail","components_BookCard_BookCard","infoLink","results","numResults","App","state","query","setState","_this2","fetch","then","response","json","data","items","console","log","catch","err","components_SearchBar_SearchBar","components_BookResults_BookResults","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.91695a38.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.props.handleQueryChange(event.target.value);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.props.handleQuerySubmit();\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"searchBar\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            id=\"searchQuery\"\r\n            type=\"search\"\r\n            size=\"50\"\r\n            placeholder=\"Search for books by Title or Author...\"\r\n            value={this.props.searchQuery}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input id=\"searchSubmit\" type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./BookCard.css\";\r\n\r\nfunction BookCard(props) {\r\n  return (\r\n    <div className=\"bookCard\">\r\n      <a href={props.link} target=\"_BLANK\" rel=\"noopener noreferrer\">\r\n        <img\r\n          src={props.img}\r\n          alt=\"Cover art for {props.data.volumeInfo.title}\"\r\n        />\r\n      </a>\r\n      <div className=\"bookData\">\r\n        <div className=\"bookDetails\">\r\n          <h3>{props.title}</h3>\r\n          <div className=\"author\">\r\n            <span className=\"label\">{props.authorTitle}:</span>\r\n            <span className=\"data\">\r\n              <ul>{props.authors}</ul>\r\n            </span>\r\n          </div>\r\n          <p className=\"publisher\">\r\n            <span className=\"label\">Publisher:</span>\r\n            <span className=\"data\">{props.publisher}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"bookLink\">\r\n          <a\r\n            href={props.link}\r\n            className=\"button\"\r\n            target=\"_BLANK\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            See book\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookCard;\r\n","import React, { Component } from \"react\";\r\nimport BookCard from \"../BookCard/BookCard\";\r\nimport \"./BookResults.css\";\r\n\r\nclass BookResults extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let bookCardArray = [];\r\n    let resultsFound = \"\";\r\n    if (Array.isArray(this.props.books)) {\r\n      for (var i = 0; i < this.props.books.length; i++) {\r\n        var item = this.props.books[i];\r\n        // default values in case data is missing\r\n        let publisher = \"N/A\";\r\n        let img = \"https://via.placeholder.com/128x194?text=No+Image\";\r\n        let authorTitle = \"Author\";\r\n        let authors = \"\";\r\n        // check if data exists before sending to bookcard\r\n        if (item.volumeInfo.authors) {\r\n          if (item.volumeInfo.authors.length > 1) {\r\n            authorTitle = \"Authors\";\r\n          }\r\n          authors = item.volumeInfo.authors.map(author => (\r\n            <li key={author}>{author}</li>\r\n          ));\r\n        } else {\r\n          authors = <li>N/A</li>;\r\n        }\r\n\r\n        if (item.volumeInfo.imageLinks) {\r\n          img = item.volumeInfo.imageLinks.thumbnail;\r\n        }\r\n        if (item.volumeInfo.publisher) {\r\n          publisher = item.volumeInfo.publisher;\r\n        }\r\n        bookCardArray[i] = (\r\n          <BookCard\r\n            title={item.volumeInfo.title}\r\n            authorTitle={authorTitle}\r\n            authors={authors}\r\n            publisher={publisher}\r\n            img={img}\r\n            link={item.volumeInfo.infoLink}\r\n            key={item.id}\r\n          />\r\n        );\r\n      }\r\n    }\r\n    // tell user how many books were found\r\n    if (this.props.results === true) {\r\n      let numResults = 0;\r\n      if (this.props.books) {\r\n        numResults = this.props.books.length;\r\n      } else {\r\n        numResults = 0;\r\n      }\r\n      resultsFound = (\r\n        <div id=\"resultsFound\">Displaying {0 + numResults} results</div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {resultsFound}\r\n        <div id=\"bookResults\">{bookCardArray}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookResults;\r\n","import React, { Component } from \"react\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport BookResults from \"./components/BookResults/BookResults\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: \"\",\n      results: false,\n      books: []\n    };\n\n    this.handleQueryChange = this.handleQueryChange.bind(this);\n    this.handleQuerySubmit = this.handleQuerySubmit.bind(this);\n  }\n\n  handleQueryChange(query) {\n    this.setState({ searchQuery: query });\n  }\n\n  handleQuerySubmit() {\n    // TODO add &startIndex= to query string to support paginating results\n    if (this.state.searchQuery !== \"\") {\n      let baseURL =\n        \"https://www.googleapis.com/books/v1/volumes?maxResults=40&q=\";\n\n      // get volume info from API\n      fetch(baseURL + this.state.searchQuery)\n        .then(response => {\n          response.json().then(data => {\n            // save volume info to state\n            this.setState({ books: data.items, results: true });\n            console.log(data.items);\n          });\n        })\n        .catch(function(err) {\n          console.log(\"Fetch Error\", err);\n        });\n    }\n    console.log(\"searchQuery = \" + this.state.searchQuery);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Book Finder</h1>\n        <SearchBar\n          searchQuery={this.state.searchQuery}\n          handleQueryChange={this.handleQueryChange}\n          handleQuerySubmit={this.handleQuerySubmit}\n        />\n        <BookResults\n          searchQuery={this.state.searchQuery}\n          books={this.state.books}\n          results={this.state.results}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}