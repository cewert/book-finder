{"version":3,"sources":["components/SearchBar/SearchBar.js","components/BookCard/BookCard.js","components/BookResults/BookResults.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","bind","assertThisInitialized","handleSubmit","event","handleQueryChange","target","value","handleQuerySubmit","preventDefault","react_default","a","createElement","id","onSubmit","type","size","placeholder","searchQuery","onChange","Component","BookCard","authorTitle","authors","length","map","author","className","href","link","rel","src","img","alt","title","publisher","BookResults","bookCardArray","resultsFound","i","books","item","components_BookCard_BookCard","volumeInfo","imageLinks","thumbnail","infoLink","key","App","state","query","setState","_this2","fetch","then","response","json","data","items","console","log","catch","err","components_SearchBar_SearchBar","components_BookResults_BookResults","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7ba33696.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.props.handleQueryChange(event.target.value);\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    this.props.handleQuerySubmit();\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"searchBar\">\r\n        <form onSubmit={this.handleSubmit}>\r\n          <input\r\n            id=\"searchQuery\"\r\n            type=\"text\"\r\n            size=\"50\"\r\n            placeholder=\"Search for books by Title or Author...\"\r\n            value={this.props.searchQuery}\r\n            onChange={this.handleChange}\r\n          />\r\n          <input id=\"searchSubmit\" type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport \"./BookCard.css\";\r\n\r\nfunction BookCard(props) {\r\n  let authorTitle = \"Author\";\r\n  let authors = \"\";\r\n  if (props.authors) {\r\n    if (props.authors.length === 1) {\r\n      authors = props.authors[0];\r\n    } else {\r\n      authorTitle = \"Authors\";\r\n      authors = props.authors.map(author => <li>{author}</li>);\r\n    }\r\n  } else {\r\n    authors = <li>N/A</li>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"bookCard\">\r\n      <a href={props.link} target=\"_BLANK\" rel=\"noopener noreferrer\">\r\n        <img\r\n          src={props.img}\r\n          alt=\"Cover art for {props.data.volumeInfo.title}\"\r\n        />\r\n      </a>\r\n      <div className=\"bookData\">\r\n        <div className=\"bookDetails\">\r\n          <h3>{props.title}</h3>\r\n          <p className=\"author\">\r\n            <span className=\"label\">{authorTitle}:</span>\r\n            <span className=\"data\">\r\n              <ul>{authors}</ul>\r\n            </span>\r\n          </p>\r\n          <p className=\"publisher\">\r\n            <span className=\"label\">Publisher:</span>\r\n            <span className=\"data\">{props.publisher}</span>\r\n          </p>\r\n        </div>\r\n        <div className=\"bookLink\">\r\n          <a\r\n            href={props.link}\r\n            className=\"button\"\r\n            target=\"_BLANK\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            See book\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BookCard;\r\n","import React, { Component } from \"react\";\r\nimport BookCard from \"../BookCard/BookCard\";\r\nimport \"./BookResults.css\";\r\n\r\nclass BookResults extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    let bookCardArray = [];\r\n    let resultsFound = \"\";\r\n    for (var i = 0; i < this.props.books.length; i++) {\r\n      var item = this.props.books[i];\r\n\r\n      let publisher = \"N/A\";\r\n      let img = \"https://via.placeholder.com/128x194?text=No+Image\";\r\n      // check if data exists before sending to bookcard\r\n\r\n      bookCardArray[i] = (\r\n        <BookCard\r\n          title={item.volumeInfo.title}\r\n          authors={item.volumeInfo.authors}\r\n          publisher={item.volumeInfo.publisher}\r\n          img={item.volumeInfo.imageLinks.thumbnail}\r\n          link={item.volumeInfo.infoLink}\r\n          key={item.id}\r\n        />\r\n      );\r\n    }\r\n    if (this.props.books.length > 0) {\r\n      resultsFound = (\r\n        <div id=\"resultsFound\">\r\n          Displaying {this.props.books.length} results\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        {resultsFound}\r\n        <div id=\"bookResults\">{bookCardArray}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BookResults;\r\n","import React, { Component } from \"react\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport BookResults from \"./components/BookResults/BookResults\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchQuery: \"\",\n      books: []\n    };\n\n    this.handleQueryChange = this.handleQueryChange.bind(this);\n    this.handleQuerySubmit = this.handleQuerySubmit.bind(this);\n  }\n\n  handleQueryChange(query) {\n    this.setState({ searchQuery: query });\n  }\n\n  handleQuerySubmit() {\n    // TODO add &startIndex= to query string to support paginating results\n    let baseURL =\n      \"https://www.googleapis.com/books/v1/volumes?maxResults=40&q=\";\n\n    // get volume info from API\n    fetch(baseURL + this.state.searchQuery)\n      .then(response => {\n        response.json().then(data => {\n          // save volume info to state\n          this.setState({ books: data.items });\n          console.log(data.items);\n        });\n      })\n      .catch(function(err) {\n        console.log(\"Fetch Error\", err);\n      });\n    console.log(\"searchQuery = \" + this.state.searchQuery);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Book Finder</h1>\n        <SearchBar\n          searchQuery={this.state.searchQuery}\n          handleQueryChange={this.handleQueryChange}\n          handleQuerySubmit={this.handleQuerySubmit}\n        />\n        <BookResults books={this.state.books} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}